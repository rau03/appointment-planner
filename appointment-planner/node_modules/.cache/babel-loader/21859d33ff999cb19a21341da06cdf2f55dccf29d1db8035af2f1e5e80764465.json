{"ast":null,"code":"var _jsxFileName = \"/Users/christopherrau/appointment planner/appointment-planner/src/containers/contactsPage/ContactsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\nimport { TileList } from \"../../components/tileList/TileList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactsPage = _ref => {\n  _s();\n  let {\n    addContact,\n    contacts\n  } = _ref;\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\n  const [name, setName] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [duplicate, setDuplicate] = useState(false);\n  const handleSubmit = e => {\n    e.preventDefault();\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\n    !duplicate && addContact(name, phone, email);\n    setName(\"\");\n    setPhone(\"\");\n    setEmail(\"\");\n  };\n\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\n  useEffect(() => {\n    const check = contacts.find(contact => contact.name === name);\n    check ? setDuplicate(\"true\") : setDuplicate(false);\n  }, [name, contacts]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n        handleSubmit: handleSubmit,\n        name: name,\n        setName: setName,\n        email: email,\n        setEmail: setEmail,\n        phone: phone,\n        setPhone: setPhone\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TileList, {\n        elements: contacts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(ContactsPage, \"vNkYol+xC/T7uxd5kzXSdoj6AbM=\");\n_c = ContactsPage;\nvar _c;\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"names":["React","useEffect","useState","ContactForm","TileList","jsxDEV","_jsxDEV","ContactsPage","_ref","_s","addContact","contacts","name","setName","phone","setPhone","email","setEmail","duplicate","setDuplicate","handleSubmit","e","preventDefault","check","find","contact","children","fileName","_jsxFileName","lineNumber","columnNumber","elements","_c","$RefreshReg$"],"sources":["/Users/christopherrau/appointment planner/appointment-planner/src/containers/contactsPage/ContactsPage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\nexport const ContactsPage = ({ addContact, contacts }) => {\r\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\r\n  const [name, setName] = useState(\"\");\r\n  const [phone, setPhone] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [duplicate, setDuplicate] = useState(false);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n    !duplicate && addContact(name, phone, email);\r\n    setName(\"\");\r\n    setPhone(\"\");\r\n    setEmail(\"\");\r\n  };\r\n\r\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n  useEffect(() => {\r\n    const check = contacts.find((contact) => contact.name === name);\r\n    check ? setDuplicate(\"true\") : setDuplicate(false);\r\n  }, [name, contacts]);\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2>\r\n        <ContactForm\r\n          handleSubmit={handleSubmit}\r\n          name={name}\r\n          setName={setName}\r\n          email={email}\r\n          setEmail={setEmail}\r\n          phone={phone}\r\n          setPhone={setPhone}\r\n        />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList elements={contacts} />\r\n      </section>\r\n    </div>\r\n  );\r\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,0CAA0C;AACtE,SAASC,QAAQ,QAAQ,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC9D,OAAO,MAAMC,YAAY,GAAGC,IAAA,IAA8B;EAAAC,EAAA;EAAA,IAA7B;IAAEC,UAAU;IAAEC;EAAS,CAAC,GAAAH,IAAA;EACnD;AACF;AACA;AACA;EACE,MAAM,CAACI,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACgB,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAMkB,YAAY,GAAIC,CAAC,IAAK;IAC1BA,CAAC,CAACC,cAAc,EAAE;IAClB;AACJ;AACA;AACA;IACI,CAACJ,SAAS,IAAIR,UAAU,CAACE,IAAI,EAAEE,KAAK,EAAEE,KAAK,CAAC;IAC5CH,OAAO,CAAC,EAAE,CAAC;IACXE,QAAQ,CAAC,EAAE,CAAC;IACZE,QAAQ,CAAC,EAAE,CAAC;EACd,CAAC;;EAED;AACF;AACA;AACA;EACEhB,SAAS,CAAC,MAAM;IACd,MAAMsB,KAAK,GAAGZ,QAAQ,CAACa,IAAI,CAAEC,OAAO,IAAKA,OAAO,CAACb,IAAI,KAAKA,IAAI,CAAC;IAC/DW,KAAK,GAAGJ,YAAY,CAAC,MAAM,CAAC,GAAGA,YAAY,CAAC,KAAK,CAAC;EACpD,CAAC,EAAE,CAACP,IAAI,EAAED,QAAQ,CAAC,CAAC;EAEpB,oBACEL,OAAA;IAAAoB,QAAA,gBACEpB,OAAA;MAAAoB,QAAA,gBACEpB,OAAA;QAAAoB,QAAA,EAAI;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eACpBxB,OAAA,CAACH,WAAW;QACViB,YAAY,EAAEA,YAAa;QAC3BR,IAAI,EAAEA,IAAK;QACXC,OAAO,EAAEA,OAAQ;QACjBG,KAAK,EAAEA,KAAM;QACbC,QAAQ,EAAEA,QAAS;QACnBH,KAAK,EAAEA,KAAM;QACbC,QAAQ,EAAEA;MAAS;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACnB;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACM,eACVxB,OAAA;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM,eACNxB,OAAA;MAAAoB,QAAA,gBACEpB,OAAA;QAAAoB,QAAA,EAAI;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eACjBxB,OAAA,CAACF,QAAQ;QAAC2B,QAAQ,EAAEpB;MAAS;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACxB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACN;AAEV,CAAC;AAACrB,EAAA,CApDWF,YAAY;AAAAyB,EAAA,GAAZzB,YAAY;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}